<class name="_once peer remote" title="_once peer" package="org/_once/agent" protocol_class="_once">
    This is a peer implementation of the @Once Protocol.
    <include filename="license.xml" />

    <state name="start">
        <event name="ENTER" next="authenticating">
            <action name="on server connect" />
        </event>
    </state>

    <state name="authenticating" inherit="external">
        <event name="challenge">
            <action name="on challenge" />
            <action name="send" message="AUTHENTICATE" />
        </event>

        <event name="ok" next="connecting">
            <action name="on ok" />
            <action name="send" message="GET ENDPOINTS" />
        </event>

        <event name="nope">
            <action name="stop" />
        </event>
    </state>

    <state name="connecting" inherit="external">
        <event name="list endpoints" next="ready">
            <action name="on list endpoints" />
        </event>
    </state>

    <state name="ready" inherit="external">
        <event name="ENTER">
            <action name="on enter" />
            <action name="send" message="GET PEERS" />
        </event>

        <event name="JOIN">
            <action name="on join" />
        </event>

        <event name="LEAVE">
            <action name="on leave" />
        </event>

        <event name="EXIT">
            <action name="on exit" />
        </event>

        <event name="get peers">
            <action name="on get peers" />
            <action name="send" message="LIST PEERS" />
        </event>

        <event name="list peers">
            <action name="on list peers" />
        </event>

        <event name="remote enter">
            <action name="on remote enter" />
        </event>

        <event name="remote exit">
            <action name="on remote exit" />
        </event>

        <event name="remote whisper">
            <action name="on remote whisper" />
        </event>

        <event name="remote shout">
            <action name="on remote shout" />
        </event>

        <event name="stop">
            <action name="stop" />
        </event>
    </state>

    <state name="external">
        <event name="WHISPER">
            <action name="check shared secret" />
            <action name="on whisper" />
        </event>

        <event name="SHOUT">
            <action name="check shared secret" />
            <action name="on shout" />
        </event>
    </state>
</class>