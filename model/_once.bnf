The following ABNF grammar defines the Socket for working with @Once messages.:

        start       = *greeting update *traffic
        greeting    = S:CHALLENGE C:AUTHENTICATE ( S:OK / S:NOPE )
        update      = C:GET-ENDPOINTS S:LIST-ENDPOINTS
        traffic     = C:REMOTE-WHISPER / C:REMOTE-SHOUT

    ;  Authentication challenge to be answered by a peer.                    

    CHALLENGE       = signature %d1 version mechanisms challenge
    signature       = %xAA %xA2             ; two octets
    version         = number-1              ; Version number (1)
    mechanisms      = strings               ; One or more available authentication mechanisms.
    challenge       = bytes                 ; Challenge data.

    ;  Authentication request used to answer a challenge sent by a peer or   
    ;  the server.                                                           

    AUTHENTICATE    = signature %d2 version mechanism response
    version         = number-1              ; Version number (1)
    mechanism       = string                ; Chosen authentication mechanism.
    response        = bytes                 ; Challenge response data.

    ;  Authentication response indicating successful authentication.         

    OK              = signature %d3 version
    version         = number-1              ; Version number (1)

    ;  Authentication response indicating unsuccessful authentication.       

    NOPE            = signature %d4 version status_code status_text
    version         = number-1              ; Version number (1)
    status_code     = number-4              ; Status code.
    status_text     = string                ; Status text.

    ;  Get a list of peers connected to the server.                          

    GET-ENDPOINTS   = signature %d5 version
    version         = number-1              ; Version number (1)

    ;  Send a list of peers connected to the server.                         

    LIST-ENDPOINTS  = signature %d6 version endpoints
    version         = number-1              ; Version number (1)
    endpoints       = strings               ; List of peer endpoints.

    ;  Get a list of peers connected to the peer on the remote network.      

    GET-PEERS       = signature %d7 version
    version         = number-1              ; Version number (1)

    ;  Send a list of peers connected to the peer on the remote network.     

    LIST-PEERS      = signature %d8 version peers
    version         = number-1              ; Version number (1)
    peers           = hash                  ; List of peers.

    ;  Relay a whisper message through a bridge node.                        

    REMOTE-WHISPER  = signature %d9 version peer content
    version         = number-1              ; Version number (1)
    peer            = string                ; Remote peer.
    content         = string                ; Message content.

    ;  Relay a shout through a bridge node.                                  

    REMOTE-SHOUT    = signature %d10 version group content
    version         = number-1              ; Version number (1)
    group           = string                ; Remote group.
    content         = string                ; Message content.

    ;  Relay a remote enter event through a bridge node.                     

    REMOTE-ENTER    = signature %d11 version peer name
    version         = number-1              ; Version number (1)
    peer            = string                ; Remote peer.
    name            = string                ; Peer name.

    ;  Relay a remote exit event through a bridge node.                      

    REMOTE-EXIT     = signature %d12 version peer name
    version         = number-1              ; Version number (1)
    peer            = string                ; Remote peer.
    name            = string                ; Peer name.

    ;  Message indicating the peer should exit.                              

    STOP            = signature %d13 version
    version         = number-1              ; Version number (1)

    ; A list of string values
    strings         = strings-count *strings-value
    strings-count   = number-4
    strings-value   = longstr

    ; A list of name/value pairs
    hash            = hash-count *( hash-name hash-value )
    hash-count      = number-4
    hash-value      = longstr
    hash-name       = string

    ; Strings are always length + text contents
    string          = number-1 *VCHAR
    longstr         = number-4 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-4        = 4OCTET
